$date
	Tue Apr  8 22:34:35 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_mcu_program_hex_state_instr_mnemonic $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 8 " io_input [7:0] $end
$var wire 3 # read_addr1 [2:0] $end
$var wire 3 $ read_addr2 [2:0] $end
$var wire 1 % reset $end
$var wire 3 & write_addr [2:0] $end
$var wire 2 ' rsrc [1:0] $end
$var wire 1 ( reg_write $end
$var wire 2 ) rdest [1:0] $end
$var wire 1 * pc_sel $end
$var wire 8 + pc_out [7:0] $end
$var wire 4 , opcode [3:0] $end
$var wire 2 - mux1_sel [1:0] $end
$var wire 1 . mem_write $end
$var wire 1 / load_pc $end
$var wire 1 0 load_ir $end
$var wire 1 1 load_flags $end
$var wire 1 2 load_data_reg $end
$var wire 1 3 load_c $end
$var wire 1 4 load_b $end
$var wire 1 5 load_a $end
$var wire 8 6 jump_address [7:0] $end
$var wire 1 7 io_write_enable $end
$var wire 8 8 io_output [7:0] $end
$var wire 1 9 io_enable $end
$var wire 8 : instruction [7:0] $end
$var wire 1 ; inc_pc $end
$var wire 1 < imm_mode $end
$var wire 4 = imm [3:0] $end
$var wire 4 > alu_op [3:0] $end
$scope module cu $end
$var wire 1 ! clk $end
$var wire 1 % reset $end
$var wire 4 ? opcode [3:0] $end
$var wire 1 < imm_mode $end
$var parameter 4 @ ADD $end
$var parameter 4 A AND_OP $end
$var parameter 4 B DEC $end
$var parameter 32 C DECODE $end
$var parameter 32 D EXEC1 $end
$var parameter 32 E EXEC2 $end
$var parameter 32 F FETCH $end
$var parameter 4 G HLT $end
$var parameter 4 H IN $end
$var parameter 4 I JMP $end
$var parameter 4 J JNZ $end
$var parameter 4 K LDI $end
$var parameter 4 L LOAD $end
$var parameter 4 M MOV $end
$var parameter 4 N NOP $end
$var parameter 4 O OR_OP $end
$var parameter 4 P OUT $end
$var parameter 32 Q OUT_LOAD $end
$var parameter 32 R OUT_WRITE $end
$var parameter 4 S STORE $end
$var parameter 4 T SUB $end
$var parameter 32 U WRITEBACK $end
$var parameter 4 V XOR_OP $end
$var reg 4 W alu_op [3:0] $end
$var reg 4 X alu_op_reg [3:0] $end
$var reg 1 ; inc_pc $end
$var reg 1 9 io_enable $end
$var reg 1 7 io_write_enable $end
$var reg 1 5 load_a $end
$var reg 1 4 load_b $end
$var reg 1 3 load_c $end
$var reg 1 2 load_data_reg $end
$var reg 1 1 load_flags $end
$var reg 1 0 load_ir $end
$var reg 1 / load_pc $end
$var reg 1 . mem_write $end
$var reg 2 Y mux1_sel [1:0] $end
$var reg 3 Z next_state [2:0] $end
$var reg 1 * pc_sel $end
$var reg 1 ( reg_write $end
$var reg 3 [ state [2:0] $end
$upscope $end
$scope module decoder_inst $end
$var wire 8 \ instruction [7:0] $end
$var reg 4 ] imm [3:0] $end
$var reg 1 < imm_mode $end
$var reg 4 ^ opcode [3:0] $end
$var reg 2 _ rdest [1:0] $end
$var reg 2 ` rsrc [1:0] $end
$upscope $end
$scope module dp $end
$var wire 4 a alu_op [3:0] $end
$var wire 1 b carry $end
$var wire 1 ! clk $end
$var wire 1 ; inc_pc $end
$var wire 1 9 io_enable $end
$var wire 8 c io_input [7:0] $end
$var wire 1 7 io_write_enable $end
$var wire 8 d jump_address [7:0] $end
$var wire 1 5 load_a $end
$var wire 1 4 load_b $end
$var wire 1 3 load_c $end
$var wire 1 2 load_data_reg $end
$var wire 1 1 load_flags $end
$var wire 1 0 load_ir $end
$var wire 1 / load_pc $end
$var wire 1 . mem_write $end
$var wire 2 e mux1_sel [1:0] $end
$var wire 1 f overflow $end
$var wire 1 * pc_sel $end
$var wire 3 g read_addr1 [2:0] $end
$var wire 3 h read_addr2 [2:0] $end
$var wire 1 ( reg_write $end
$var wire 1 % reset $end
$var wire 3 i write_addr [2:0] $end
$var wire 1 j zero $end
$var wire 8 k write_back_data [7:0] $end
$var wire 8 l reg_read_data2 [7:0] $end
$var wire 8 m reg_read_data1 [7:0] $end
$var wire 8 n reg_c_out [7:0] $end
$var wire 8 o reg_b_out [7:0] $end
$var wire 8 p reg_a_out [7:0] $end
$var wire 8 q pc_plus_1 [7:0] $end
$var wire 8 r pc_out [7:0] $end
$var wire 8 s pc_mux_out [7:0] $end
$var wire 8 t mem_data_out [7:0] $end
$var wire 8 u io_output [7:0] $end
$var wire 8 v instruction_in [7:0] $end
$var wire 8 w instruction [7:0] $end
$var wire 8 x data_register_out [7:0] $end
$var wire 8 y alu_result [7:0] $end
$scope module alu_unit $end
$var wire 4 z alu_op [3:0] $end
$var wire 9 { sum [8:0] $end
$var wire 9 | diff [8:0] $end
$var wire 8 } b [7:0] $end
$var wire 8 ~ a [7:0] $end
$var parameter 4 !" ADD $end
$var parameter 4 "" AND $end
$var parameter 4 #" DEC $end
$var parameter 4 $" LDI $end
$var parameter 4 %" MOV $end
$var parameter 4 &" OR $end
$var parameter 4 '" SUB $end
$var parameter 4 (" XOR $end
$var reg 1 )" carry $end
$var reg 1 *" overflow $end
$var reg 8 +" result [7:0] $end
$var reg 1 ," zero $end
$upscope $end
$scope module data_reg $end
$var wire 1 ! clk $end
$var wire 1 2 load_data $end
$var wire 1 % reset $end
$var wire 8 -" data_in [7:0] $end
$var reg 8 ." data_out [7:0] $end
$upscope $end
$scope module flags_reg $end
$var wire 1 b carry_in $end
$var wire 1 ! clk $end
$var wire 1 1 load_flags $end
$var wire 1 f overflow_in $end
$var wire 1 % reset $end
$var wire 1 j zero_in $end
$var reg 1 /" carry $end
$var reg 1 0" overflow $end
$var reg 1 1" zero $end
$upscope $end
$scope module io_block $end
$var wire 1 ! clk $end
$var wire 8 2" data_in [7:0] $end
$var wire 1 9 io_enable $end
$var wire 8 3" io_input [7:0] $end
$var wire 1 % reset $end
$var wire 1 7 write_enable $end
$var reg 8 4" data_out [7:0] $end
$var reg 8 5" io_output [7:0] $end
$upscope $end
$scope module ir $end
$var wire 1 ! clk $end
$var wire 1 0 load_ir $end
$var wire 1 % reset $end
$var wire 8 6" instr_in [7:0] $end
$var reg 8 7" instr_out [7:0] $end
$upscope $end
$scope module mux_writeback $end
$var wire 8 8" io_data [7:0] $end
$var wire 8 9" mem_data [7:0] $end
$var wire 2 :" sel [1:0] $end
$var wire 8 ;" alu_data [7:0] $end
$var reg 8 <" out_data [7:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ! clk $end
$var wire 1 ; inc_pc $end
$var wire 1 / load_pc $end
$var wire 1 % reset $end
$var wire 8 =" pc_in [7:0] $end
$var reg 8 >" pc_out [7:0] $end
$upscope $end
$scope module pc_selector $end
$var wire 8 ?" jump_address [7:0] $end
$var wire 8 @" pc_plus_1 [7:0] $end
$var wire 1 * sel $end
$var wire 8 A" pc_in [7:0] $end
$upscope $end
$scope module ram $end
$var wire 1 ! clk $end
$var wire 8 B" data_in [7:0] $end
$var wire 1 . write_enable $end
$var wire 8 C" address [7:0] $end
$var reg 8 D" data_out [7:0] $end
$upscope $end
$scope module regA $end
$var wire 1 ! clk $end
$var wire 1 5 load_a $end
$var wire 1 % reset $end
$var wire 8 E" data_in [7:0] $end
$var reg 8 F" data_out [7:0] $end
$upscope $end
$scope module regB $end
$var wire 1 ! clk $end
$var wire 1 4 load_b $end
$var wire 1 % reset $end
$var wire 8 G" data_in [7:0] $end
$var reg 8 H" data_out [7:0] $end
$upscope $end
$scope module regC $end
$var wire 1 ! clk $end
$var wire 8 I" data_in [7:0] $end
$var wire 1 3 load_c $end
$var wire 1 % reset $end
$var reg 8 J" data_out [7:0] $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 3 K" read_addr1 [2:0] $end
$var wire 3 L" read_addr2 [2:0] $end
$var wire 8 M" read_data1 [7:0] $end
$var wire 8 N" read_data2 [7:0] $end
$var wire 1 ( reg_write $end
$var wire 3 O" write_addr [2:0] $end
$var wire 8 P" write_data [7:0] $end
$upscope $end
$scope module rom $end
$var wire 8 Q" address [7:0] $end
$var reg 8 R" instruction [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 ("
b1 '"
b11 &"
b101 %"
b110 $"
b111 #"
b10 ""
b0 !"
b101 V
b100 U
b10 T
b1001 S
b110 R
b101 Q
b1011 P
b100 O
b0 N
b110 M
b1000 L
b111 K
b1110 J
b1101 I
b1010 H
b1111 G
b0 F
b11 E
b10 D
b1 C
b1100 B
b11 A
b1 @
$end
#0
$dumpvars
b1110000 R"
b0 Q"
b0 P"
b0 O"
b11 N"
b101 M"
b10 L"
b1 K"
b0 J"
b0 I"
b0 H"
b11 G"
b0 F"
b101 E"
bx D"
b0 C"
b0 B"
b1 A"
b1 @"
b0 ?"
b0 >"
b1 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b1110000 6"
b0 5"
b0 4"
b0 3"
b0 2"
01"
00"
0/"
b0 ."
bx -"
1,"
b0 +"
0*"
0)"
b0 ~
b0 }
b0 |
b0 {
bx z
b0 y
b0 x
b0 w
b1110000 v
b0 u
bx t
b1 s
b0 r
b1 q
b0 p
b0 o
b0 n
b101 m
b11 l
b0 k
xj
b0 i
b10 h
b1 g
0f
b0 e
b0 d
b0 c
0b
bx a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b1 Z
b0 Y
bx X
bx W
b0 ?
bx >
b0 =
0<
1;
b0 :
09
b0 8
07
b0 6
05
04
03
02
01
10
0/
0.
b0 -
b0 ,
b0 +
0*
b0 )
0(
b0 '
b0 &
1%
b10 $
b1 #
b0 "
0!
$end
#5000
1!
#10000
0%
0!
#15000
b10 Z
0;
00
b111 ,
b111 ?
b111 ^
b10 s
b10 ="
b10 A"
b1 [
b1110000 :
b1110000 \
b1110000 w
b1110000 7"
b10 q
b10 @"
b1 +
b1 r
b1 >"
b1 Q"
1!
#20000
0!
#25000
b110 X
13
14
15
b11 Z
b10 [
1!
#30000
0!
#35000
0j
0,"
b101 y
b101 +"
b101 I"
11
b100 Z
b110 >
b110 W
b110 a
b110 z
13
04
05
b11 [
b101 p
b101 ~
b101 F"
b10 |
b1000 {
b11 o
b11 }
b11 C"
b11 H"
1!
#40000
0!
#45000
1(
b0 Z
01
03
b100 [
b101 k
b101 <"
b101 P"
b101 n
b101 ;"
b101 J"
1!
#50000
0!
#55000
b1 Z
1;
10
0(
b0 [
1!
#60000
0!
#65000
b10000 v
b10000 6"
b10000 R"
b11 s
b11 ="
b11 A"
b10 Z
0;
00
b11 q
b11 @"
b10 +
b10 r
b10 >"
b10 Q"
b1 [
1!
#70000
0!
#75000
13
14
15
b11 Z
b10 [
1!
#80000
0!
#85000
11
b100 Z
13
04
05
b11 [
1!
#90000
0!
#95000
1(
b0 Z
01
03
b100 [
1!
#100000
0!
#105000
b1 Z
1;
10
0(
b0 [
1!
#110000
0!
#115000
b10 Z
0;
00
b1 ,
b1 ?
b1 ^
b100000 v
b100000 6"
b100000 R"
b100 s
b100 ="
b100 A"
b1 [
b10000 :
b10000 \
b10000 w
b10000 7"
b100 q
b100 @"
b11 +
b11 r
b11 >"
b11 Q"
1!
#120000
0!
#125000
b0 X
13
14
15
b11 Z
b10 [
1!
#130000
0!
#135000
b1000 y
b1000 +"
b1000 I"
11
b100 Z
b0 >
b0 W
b0 a
b0 z
13
04
05
b11 [
1!
#140000
0!
#145000
1(
b0 Z
01
03
b100 [
b1000 k
b1000 <"
b1000 P"
b1000 n
b1000 ;"
b1000 J"
1!
#150000
0!
#155000
b1 Z
1;
10
0(
b0 [
1!
#160000
0!
#165000
b1110000 v
b1110000 6"
b1110000 R"
b101 s
b101 ="
b101 A"
b10 ,
b10 ?
b10 ^
b10 Z
0;
00
b101 q
b101 @"
b100 +
b100 r
b100 >"
b100 Q"
b100000 :
b100000 \
b100000 w
b100000 7"
b1 [
1!
#170000
0!
#175000
b1 X
13
14
15
b11 Z
b10 [
1!
#180000
0!
#185000
b10 y
b10 +"
b10 I"
11
b100 Z
b1 >
b1 W
b1 a
b1 z
13
04
05
b11 [
1!
#190000
0!
#195000
1(
b0 Z
01
03
b100 [
b10 k
b10 <"
b10 P"
b10 n
b10 ;"
b10 J"
1!
#200000
0!
#205000
b1 Z
1;
10
0(
b0 [
1!
#210000
0!
#215000
b10 Z
0;
00
b111 ,
b111 ?
b111 ^
b110 s
b110 ="
b110 A"
b1 [
b1110000 :
b1110000 \
b1110000 w
b1110000 7"
b110 q
b110 @"
b101 +
b101 r
b101 >"
b101 Q"
1!
#220000
0!
#225000
b110 X
13
14
15
b11 Z
b10 [
1!
#230000
0!
#235000
b101 y
b101 +"
b101 I"
11
b100 Z
b110 >
b110 W
b110 a
b110 z
13
04
05
b11 [
1!
#240000
0!
#245000
1(
b0 Z
01
03
b100 [
b101 k
b101 <"
b101 P"
b101 n
b101 ;"
b101 J"
1!
#250000
0!
#255000
b1 Z
1;
10
0(
b0 [
1!
#260000
0!
#265000
b10000 v
b10000 6"
b10000 R"
b111 s
b111 ="
b111 A"
b10 Z
0;
00
b111 q
b111 @"
b110 +
b110 r
b110 >"
b110 Q"
b1 [
1!
#270000
0!
#275000
13
14
15
b11 Z
b10 [
1!
#280000
0!
#285000
11
b100 Z
13
04
05
b11 [
1!
#290000
0!
#295000
1(
b0 Z
01
03
b100 [
1!
#300000
0!
#305000
b1 Z
1;
10
0(
b0 [
1!
#310000
0!
#315000
b10 Z
0;
00
b1 ,
b1 ?
b1 ^
b100000 v
b100000 6"
b100000 R"
b1000 s
b1000 ="
b1000 A"
b1 [
b10000 :
b10000 \
b10000 w
b10000 7"
b1000 q
b1000 @"
b111 +
b111 r
b111 >"
b111 Q"
1!
#320000
0!
#325000
b0 X
13
14
15
b11 Z
b10 [
1!
#330000
0!
#335000
b1000 y
b1000 +"
b1000 I"
11
b100 Z
b0 >
b0 W
b0 a
b0 z
13
04
05
b11 [
1!
#340000
0!
#345000
1(
b0 Z
01
03
b100 [
b1000 k
b1000 <"
b1000 P"
b1000 n
b1000 ;"
b1000 J"
1!
#350000
0!
#355000
b1 Z
1;
10
0(
b0 [
1!
#360000
0!
#365000
bx v
bx 6"
bx R"
b1001 s
b1001 ="
b1001 A"
b10 ,
b10 ?
b10 ^
b10 Z
0;
00
b1001 q
b1001 @"
b1000 +
b1000 r
b1000 >"
b1000 Q"
b100000 :
b100000 \
b100000 w
b100000 7"
b1 [
1!
#370000
0!
#375000
b1 X
13
14
15
b11 Z
b10 [
1!
#380000
0!
#385000
b10 y
b10 +"
b10 I"
11
b100 Z
b1 >
b1 W
b1 a
b1 z
13
04
05
b11 [
1!
#390000
0!
#395000
1(
b0 Z
01
03
b100 [
b10 k
b10 <"
b10 P"
b10 n
b10 ;"
b10 J"
1!
#400000
0!
#405000
b1 Z
1;
10
0(
b0 [
1!
#410000
0!
#415000
b0 Z
0;
00
bx '
bx `
b0xx &
b0xx i
b0xx O"
bx )
bx _
bx ,
bx ?
bx ^
b1010 s
b1010 ="
b1010 A"
b1 [
bx :
bx \
bx w
bx 7"
b1010 q
b1010 @"
b1001 +
b1001 r
b1001 >"
b1001 Q"
1!
#420000
0!
#425000
b1 Z
1;
10
b0 [
1!
#430000
0!
#435000
b0 Z
0;
00
b1011 s
b1011 ="
b1011 A"
b1 [
b1011 q
b1011 @"
b1010 +
b1010 r
b1010 >"
b1010 Q"
1!
#440000
0!
#445000
b1 Z
1;
10
b0 [
1!
#450000
0!
#455000
b0 Z
0;
00
b1100 s
b1100 ="
b1100 A"
b1 [
b1100 q
b1100 @"
b1011 +
b1011 r
b1011 >"
b1011 Q"
1!
#460000
0!
#465000
b1 Z
1;
10
b0 [
1!
#470000
0!
#475000
b0 Z
0;
00
b1101 s
b1101 ="
b1101 A"
b1 [
b1101 q
b1101 @"
b1100 +
b1100 r
b1100 >"
b1100 Q"
1!
#480000
0!
#485000
b1 Z
1;
10
b0 [
1!
#490000
0!
#495000
b0 Z
0;
00
b1110 s
b1110 ="
b1110 A"
b1 [
b1110 q
b1110 @"
b1101 +
b1101 r
b1101 >"
b1101 Q"
1!
#500000
0!
#505000
b1 Z
1;
10
b0 [
1!
#510000
0!
#515000
b0 Z
0;
00
b1111 s
b1111 ="
b1111 A"
b1 [
b1111 q
b1111 @"
b1110 +
b1110 r
b1110 >"
b1110 Q"
1!
#520000
0!
#525000
b1 Z
1;
10
b0 [
1!
#530000
0!
#535000
b0 Z
0;
00
b10000 s
b10000 ="
b10000 A"
b1 [
b10000 q
b10000 @"
b1111 +
b1111 r
b1111 >"
b1111 Q"
1!
#540000
0!
#545000
b1 Z
1;
10
b0 [
1!
#550000
0!
#555000
b0 Z
0;
00
b10001 s
b10001 ="
b10001 A"
b1 [
b10001 q
b10001 @"
b10000 +
b10000 r
b10000 >"
b10000 Q"
1!
#560000
0!
#565000
b1 Z
1;
10
b0 [
1!
#570000
0!
#575000
b0 Z
0;
00
b10010 s
b10010 ="
b10010 A"
b1 [
b10010 q
b10010 @"
b10001 +
b10001 r
b10001 >"
b10001 Q"
1!
#580000
0!
#585000
b1 Z
1;
10
b0 [
1!
#590000
0!
#595000
b0 Z
0;
00
b10011 s
b10011 ="
b10011 A"
b1 [
b10011 q
b10011 @"
b10010 +
b10010 r
b10010 >"
b10010 Q"
1!
#600000
0!
#605000
b1 Z
1;
10
b0 [
1!
#610000
0!
#615000
b0 Z
0;
00
b10100 s
b10100 ="
b10100 A"
b1 [
b10100 q
b10100 @"
b10011 +
b10011 r
b10011 >"
b10011 Q"
1!
#620000
0!
#625000
b1 Z
1;
10
b0 [
1!
#630000
0!
#635000
b0 Z
0;
00
b10101 s
b10101 ="
b10101 A"
b1 [
b10101 q
b10101 @"
b10100 +
b10100 r
b10100 >"
b10100 Q"
1!
#640000
0!
#645000
b1 Z
1;
10
b0 [
1!
#650000
0!
#655000
b0 Z
0;
00
b10110 s
b10110 ="
b10110 A"
b1 [
b10110 q
b10110 @"
b10101 +
b10101 r
b10101 >"
b10101 Q"
1!
#660000
0!
#665000
b1 Z
1;
10
b0 [
1!
#670000
0!
#675000
b0 Z
0;
00
b10111 s
b10111 ="
b10111 A"
b1 [
b10111 q
b10111 @"
b10110 +
b10110 r
b10110 >"
b10110 Q"
1!
#680000
0!
#685000
b1 Z
1;
10
b0 [
1!
#690000
0!
#695000
b0 Z
0;
00
b11000 s
b11000 ="
b11000 A"
b1 [
b11000 q
b11000 @"
b10111 +
b10111 r
b10111 >"
b10111 Q"
1!
#700000
0!
#705000
b1 Z
1;
10
b0 [
1!
#710000
0!
#715000
b0 Z
0;
00
b11001 s
b11001 ="
b11001 A"
b1 [
b11001 q
b11001 @"
b11000 +
b11000 r
b11000 >"
b11000 Q"
1!
#720000
0!
#725000
b1 Z
1;
10
b0 [
1!
#730000
0!
#735000
b0 Z
0;
00
b11010 s
b11010 ="
b11010 A"
b1 [
b11010 q
b11010 @"
b11001 +
b11001 r
b11001 >"
b11001 Q"
1!
#740000
0!
#745000
b1 Z
1;
10
b0 [
1!
#750000
0!
#755000
b0 Z
0;
00
b11011 s
b11011 ="
b11011 A"
b1 [
b11011 q
b11011 @"
b11010 +
b11010 r
b11010 >"
b11010 Q"
1!
#760000
0!
#765000
b1 Z
1;
10
b0 [
1!
#770000
0!
#775000
b0 Z
0;
00
b11100 s
b11100 ="
b11100 A"
b1 [
b11100 q
b11100 @"
b11011 +
b11011 r
b11011 >"
b11011 Q"
1!
#780000
0!
#785000
b1 Z
1;
10
b0 [
1!
#790000
0!
#795000
b0 Z
0;
00
b11101 s
b11101 ="
b11101 A"
b1 [
b11101 q
b11101 @"
b11100 +
b11100 r
b11100 >"
b11100 Q"
1!
#800000
0!
#805000
b1 Z
1;
10
b0 [
1!
#810000
0!
#815000
b0 Z
0;
00
b11110 s
b11110 ="
b11110 A"
b1 [
b11110 q
b11110 @"
b11101 +
b11101 r
b11101 >"
b11101 Q"
1!
#820000
0!
#825000
b1 Z
1;
10
b0 [
1!
#830000
0!
#835000
b0 Z
0;
00
b11111 s
b11111 ="
b11111 A"
b1 [
b11111 q
b11111 @"
b11110 +
b11110 r
b11110 >"
b11110 Q"
1!
#840000
0!
#845000
b1 Z
1;
10
b0 [
1!
#850000
0!
#855000
b0 Z
0;
00
b100000 s
b100000 ="
b100000 A"
b1 [
b100000 q
b100000 @"
b11111 +
b11111 r
b11111 >"
b11111 Q"
1!
#860000
0!
#865000
b1 Z
1;
10
b0 [
1!
#870000
0!
#875000
b0 Z
0;
00
b100001 s
b100001 ="
b100001 A"
b1 [
b100001 q
b100001 @"
b100000 +
b100000 r
b100000 >"
b100000 Q"
1!
#880000
0!
#885000
b1 Z
1;
10
b0 [
1!
#890000
0!
#895000
b0 Z
0;
00
b100010 s
b100010 ="
b100010 A"
b1 [
b100010 q
b100010 @"
b100001 +
b100001 r
b100001 >"
b100001 Q"
1!
#900000
0!
#905000
b1 Z
1;
10
b0 [
1!
#910000
0!
#915000
b0 Z
0;
00
b100011 s
b100011 ="
b100011 A"
b1 [
b100011 q
b100011 @"
b100010 +
b100010 r
b100010 >"
b100010 Q"
1!
#920000
0!
#925000
b1 Z
1;
10
b0 [
1!
#930000
0!
#935000
b0 Z
0;
00
b100100 s
b100100 ="
b100100 A"
b1 [
b100100 q
b100100 @"
b100011 +
b100011 r
b100011 >"
b100011 Q"
1!
#940000
0!
#945000
b1 Z
1;
10
b0 [
1!
#950000
0!
#955000
b0 Z
0;
00
b100101 s
b100101 ="
b100101 A"
b1 [
b100101 q
b100101 @"
b100100 +
b100100 r
b100100 >"
b100100 Q"
1!
#960000
0!
#965000
b1 Z
1;
10
b0 [
1!
#970000
0!
#975000
b0 Z
0;
00
b100110 s
b100110 ="
b100110 A"
b1 [
b100110 q
b100110 @"
b100101 +
b100101 r
b100101 >"
b100101 Q"
1!
#980000
0!
#985000
b1 Z
1;
10
b0 [
1!
#990000
0!
#995000
b0 Z
0;
00
b100111 s
b100111 ="
b100111 A"
b1 [
b100111 q
b100111 @"
b100110 +
b100110 r
b100110 >"
b100110 Q"
1!
#1000000
0!
#1005000
b1 Z
1;
10
b0 [
1!
#1010000
0!
